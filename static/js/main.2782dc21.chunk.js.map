{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/task-list/task-list-header.tsx","../../src/components/task-list/task-list-table.tsx","../../src/components/other/tooltip.tsx","../../src/components/other/vertical-scroll.tsx","../../src/components/task-list/task-list.tsx","../../src/components/grid/grid-body.tsx","../../src/components/grid/grid.tsx","../../src/components/calendar/top-part-of-calendar.tsx","../../src/components/calendar/calendar.tsx","../../src/components/other/arrow.tsx","../../src/helpers/bar-helper.ts","../../src/helpers/other-helper.ts","../../src/components/task-item/bar/bar-display.tsx","../../src/components/task-item/bar/bar-date-handle.tsx","../../src/components/task-item/bar/bar-progress-handle.tsx","../../src/components/task-item/bar/bar.tsx","../../src/components/task-item/bar/bar-small.tsx","../../src/components/task-item/milestone/milestone.tsx","../../src/components/task-item/project/project.tsx","../../src/components/task-item/task-item.tsx","../../src/components/gantt/task-gantt-content.tsx","../../src/components/gantt/task-gantt.tsx","../../src/components/other/horizontal-scroll.tsx","../../src/components/gantt/gantt.tsx","components/view-switcher.tsx","App.tsx","helper.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","ganttDateRange","tasks","newStartDate","newEndDate","task","getMonday","seedDates","currentDate","dates","getLocaleMonth","bottomValue","Intl","month","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","TaskListHeaderDefault","rowWidth","className","styles","style","fontFamily","fontSize","height","headerHeight","minWidth","marginTop","TaskListTableDefault","locale","dateTimeOptions","weekday","year","t","rowHeight","key","id","maxWidth","title","name","Tooltip","TooltipContent","tooltipRef","useRef","useState","displayXStartEndpoint","useEffect","tooltipHeight","tooltipY","newWidth","newRelatedX","arrowIndent","tooltipLowerPoint","svgHeight","setRelatedY","setToolWidth","setRelatedX","setToolHeight","x","relatedX","y","relatedY","width","toolWidth","toolHeight","ref","StandardTooltipContent","VerticalScroll","onScroll","scrollRef","TaskList","TaskListTable","horizontalContainerRef","headerProps","tableProps","selectedTaskId","selectedTask","setSelectedTask","taskListRef","React","horizontalContainerClass","ganttHeight","GridBody","todayColor","gridRows","rowLines","y1","x2","svgWidth","y2","now","tickX","ticks","today","i","x1","columnWidth","fill","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","topValues","bottomValues","dateSetup","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","getCalendarValuesForOther","length","Arrow","indexCompare","taskFrom","taskTo","taskToEndPosition","taskHeight","path","trianglePoints","strokeWidth","d","points","convertToBarTask","barTask","convertToMilestone","convertToBar","taskXCoordinate","taskYCoordinate","index","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","typeInternal","handleWidth","barCornerRadius","barChildren","rotatedHeight","end","progress","xDate","progressWithByParams","taskX2","getProgressPoint","progressX","taskY","point","moveByX","additionalXValue","newX1","dateByX","newDate","taskDate","handleTaskBySVGMouseEvent","result","handleTaskBySVGMouseEventForMilestone","handleTaskBySVGMouseEventForBar","changedTask","isChanged","barWidth","progressByX","svgX","startByX","xStep","newX2","endByX","newMoveX1","isKeyboardEvent","event","BarDisplay","onMouseDown","ry","rx","isSelected","progressWidth","BarDateHandle","BarProgressHandle","progressPoint","Bar","handleHeight","tabIndex","e","isDateChangeable","onEventStart","isProgressChangeable","BarSmall","Milestone","transform","Project","barColor","processColor","projectWith","projectLeftTriangle","projectRightTriangle","TaskItem","textRef","setTaskItem","setIsTextInside","onKeyDown","onMouseEnter","onMouseLeave","onDoubleClick","onFocus","hasChild","isTextInside","getX","TaskGanttContent","svg","dateDelta","setXStep","timeStep","handleMouseMove","a","ganttEvent","cursor","setGanttEvent","action","handleMouseUp","newChangedTask","isNotLikeOriginal","originalSelectedTask","setIsMoving","operationSuccess","onDateChange","onProgressChange","setFailedTask","isMoving","handleBarEventStart","onDelete","console","setInitEventX1Delta","arrowColor","stroke","child","isDisabled","isDelete","TaskGantt","verticalGanttContainerRef","ganttSVGRef","start","newBarProps","setDisplayXStartEndpoint","scrollX","xmlns","gridProps","calendarProps","barProps","HorizontalScroll","marginLeft","taskListWidth","Gantt","listCellWidth","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","projectProgressColor","projectProgressSelectedColor","projectBackgroundColor","projectBackgroundSelectedColor","milestoneBackgroundColor","milestoneBackgroundSelectedColor","TaskListHeader","onSelect","wrapperRef","startDate","endDate","barTasks","ganttFullHeight","newDates","setDateSetup","setBarTasks","dependencies","j","dependence","convertToBarTasks","prevStateTask","newTaskList","failedTask","newTaskHeight","setTaskHeight","setTaskListWidth","handleWheel","scrollMove","newScrollX","setScrollX","newScrollY","scrollY","setScrollY","setIgnoreScrollEvent","passive","handleSelectedTask","taskId","newSelectedTask","oldSelectedTask","isX","scroll","ViewSwitcher","onViewModeChange","onViewListChange","isChecked","onClick","QuarterDay","HalfDay","Day","Week","Month","type","defaultChecked","App","view","setView","getFullYear","getMonth","project","initTasks","setTasks","setIsChecked","onTaskChange","log","newTasks","map","projectId","projectTasks","filter","getTime","getStartEndDateForProject","findIndex","changedProject","onTaskDelete","conf","window","confirm","onDblClick","alert","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2782dc21.chunk.js","sourcesContent":["export enum ViewMode {\r\n  QuarterDay = \"Quarter Day\",\r\n  HalfDay = \"Half Day\",\r\n  Day = \"Day\",\r\n  /** ISO-8601 week */\r\n  Week = \"Week\",\r\n  Month = \"Month\",\r\n}\r\nexport type TaskType = \"task\" | \"milestone\" | \"project\";\r\nexport interface Task {\r\n  id: string;\r\n  type: TaskType;\r\n  name: string;\r\n  start: Date;\r\n  end: Date;\r\n  /**\r\n   * From 0 to 100\r\n   */\r\n  progress: number;\r\n  styles?: {\r\n    backgroundColor?: string;\r\n    backgroundSelectedColor?: string;\r\n    progressColor?: string;\r\n    progressSelectedColor?: string;\r\n  };\r\n  isDisabled?: boolean;\r\n  project?: string;\r\n  dependencies?: string[];\r\n}\r\n\r\nexport interface EventOption {\r\n  /**\r\n   * Time step value for date changes.\r\n   */\r\n  timeStep?: number;\r\n  /**\r\n   * Invokes on bar select on unselect.\r\n   */\r\n  onSelect?: (task: Task, isSelected: boolean) => void;\r\n  /**\r\n   * Invokes on bar double click.\r\n   */\r\n  onDoubleClick?: (task: Task) => void;\r\n  /**\r\n   * Invokes on end and start time change. Chart undoes operation if method return false or error.\r\n   */\r\n  onDateChange?: (\r\n    task: Task\r\n  ) => void | boolean | Promise<void> | Promise<boolean>;\r\n  /**\r\n   * Invokes on progress change. Chart undoes operation if method return false or error.\r\n   */\r\n  onProgressChange?: (\r\n    task: Task\r\n  ) => void | boolean | Promise<void> | Promise<boolean>;\r\n  /**\r\n   * Invokes on delete selected task. Chart undoes operation if method return false or error.\r\n   */\r\n  onDelete?: (task: Task) => void | boolean | Promise<void> | Promise<boolean>;\r\n}\r\n\r\nexport interface DisplayOption {\r\n  viewMode?: ViewMode;\r\n  /**\r\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\r\n   */\r\n  locale?: string;\r\n}\r\n\r\nexport interface StylingOption {\r\n  headerHeight?: number;\r\n  columnWidth?: number;\r\n  listCellWidth?: string;\r\n  rowHeight?: number;\r\n  ganttHeight?: number;\r\n  barCornerRadius?: number;\r\n  handleWidth?: number;\r\n  fontFamily?: string;\r\n  fontSize?: string;\r\n  /**\r\n   * How many of row width can be taken by task.\r\n   * From 0 to 100\r\n   */\r\n  barFill?: number;\r\n  barProgressColor?: string;\r\n  barProgressSelectedColor?: string;\r\n  barBackgroundColor?: string;\r\n  barBackgroundSelectedColor?: string;\r\n  projectProgressColor?: string;\r\n  projectProgressSelectedColor?: string;\r\n  projectBackgroundColor?: string;\r\n  projectBackgroundSelectedColor?: string;\r\n  milestoneBackgroundColor?: string;\r\n  milestoneBackgroundSelectedColor?: string;\r\n  arrowColor?: string;\r\n  arrowIndent?: number;\r\n  todayColor?: string;\r\n  TooltipContent?: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n  TaskListHeader?: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable?: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n    selectedTaskId: string;\r\n    /**\r\n     * Sets selected task by id\r\n     */\r\n    setSelectedTask: (taskId: string) => void;\r\n  }>;\r\n}\r\n\r\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\r\n  tasks: Task[];\r\n}\r\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].start;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newStartDate = startOfDate(newStartDate, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    case ViewMode.Day:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 5, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-header.module.css\";\r\n\r\nexport const TaskListHeaderDefault: React.FC<{\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n}> = ({ headerHeight, fontFamily, fontSize, rowWidth }) => {\r\n  return (\r\n    <div\r\n      className={styles.ganttTable}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      <div\r\n        className={styles.ganttTable_Header}\r\n        style={{\r\n          height: headerHeight - 2,\r\n        }}\r\n      >\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;Name\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.2,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;From\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.25,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;To\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-table.module.css\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport const TaskListTableDefault: React.FC<{\r\n  rowHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  locale: string;\r\n  tasks: Task[];\r\n  selectedTaskId: string;\r\n  setSelectedTask: (taskId: string) => void;\r\n}> = ({ rowHeight, rowWidth, tasks, fontFamily, fontSize, locale }) => {\r\n  const dateTimeOptions = {\r\n    weekday: \"short\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  return (\r\n    <div\r\n      className={styles.taskListWrapper}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      {tasks.map(t => {\r\n        return (\r\n          <div\r\n            className={styles.taskListTableRow}\r\n            style={{ height: rowHeight }}\r\n            key={`${t.id}row`}\r\n          >\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n              title={t.name}\r\n            >\r\n              &nbsp;{t.name}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.start.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;\r\n              {t.end.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  task: BarTask;\r\n  arrowIndent: number;\r\n  svgHeight: number;\r\n  displayXStartEndpoint: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n  rowHeight: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  task,\r\n  rowHeight,\r\n  svgHeight,\r\n  displayXStartEndpoint,\r\n  arrowIndent,\r\n  fontSize,\r\n  fontFamily,\r\n  TooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [toolHeight, setToolHeight] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState(task.index * rowHeight);\r\n  const [relatedX, setRelatedX] = useState(displayXStartEndpoint.end);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const tooltipHeight = tooltipRef.current.offsetHeight * 1.1;\r\n      let tooltipY = task.index * rowHeight;\r\n      const newWidth = tooltipRef.current.scrollWidth * 1.1;\r\n      let newRelatedX = task.x2 + arrowIndent + arrowIndent * 0.5;\r\n      if (newWidth + newRelatedX > displayXStartEndpoint.end) {\r\n        newRelatedX = task.x1 - arrowIndent - arrowIndent * 0.5 - newWidth;\r\n      }\r\n      const tooltipLowerPoint = tooltipHeight + tooltipY;\r\n\r\n      if (\r\n        newRelatedX < displayXStartEndpoint.start &&\r\n        tooltipLowerPoint > svgHeight\r\n      ) {\r\n        tooltipY -= tooltipHeight;\r\n        newRelatedX = (task.x1 + task.x2 - newWidth) * 0.5;\r\n        if (newRelatedX + newWidth > displayXStartEndpoint.end) {\r\n          newRelatedX = displayXStartEndpoint.end - newWidth;\r\n        }\r\n        if (\r\n          newRelatedX + newWidth > displayXStartEndpoint.end ||\r\n          newRelatedX - newWidth < displayXStartEndpoint.start\r\n        ) {\r\n          newRelatedX = displayXStartEndpoint.end - newWidth;\r\n        }\r\n      } else if (\r\n        newRelatedX < displayXStartEndpoint.start &&\r\n        tooltipLowerPoint < svgHeight\r\n      ) {\r\n        tooltipY += rowHeight;\r\n        newRelatedX = (task.x1 + task.x2 - newWidth) * 0.5;\r\n        if (\r\n          newRelatedX + newWidth > displayXStartEndpoint.end ||\r\n          newRelatedX - newWidth < displayXStartEndpoint.start\r\n        ) {\r\n          newRelatedX = displayXStartEndpoint.end - newWidth;\r\n        }\r\n      } else if (tooltipLowerPoint > svgHeight) {\r\n        tooltipY = svgHeight - tooltipHeight;\r\n      }\r\n\r\n      setRelatedY(tooltipY);\r\n      setToolWidth(newWidth);\r\n      setRelatedX(newRelatedX);\r\n      if (tooltipHeight !== 1000) {\r\n        setToolHeight(tooltipHeight);\r\n      }\r\n    }\r\n  }, [tooltipRef, task, arrowIndent, displayXStartEndpoint]);\r\n  return (\r\n    <foreignObject\r\n      x={relatedX}\r\n      y={relatedY}\r\n      width={toolWidth}\r\n      height={toolHeight}\r\n    >\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        <TooltipContent\r\n          task={task}\r\n          fontSize={fontSize}\r\n          fontFamily={fontFamily}\r\n        />\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nexport const StandardTooltipContent: React.FC<{\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n}> = ({ task, fontSize, fontFamily }) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      {task.end.getTime() - task.start.getTime() !== 0 && (\r\n        <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n          (task.end.getTime() - task.start.getTime()) /\r\n          (1000 * 60 * 60 * 24)\r\n        )} day(s)`}</p>\r\n      )}\r\n\r\n      <p className={styles.tooltipDefaultContainerParagraph}>\r\n        {!!task.progress && `Progress: ${task.progress} %`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport styles from \"./vertical-scroll.module.css\";\r\n\r\nexport const VerticalScroll: React.FC<{\r\n  scroll: number;\r\n  ganttHeight: number;\r\n  ganttFullHeight: number;\r\n  headerHeight: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n}> = ({ scroll, ganttHeight, ganttFullHeight, headerHeight, onScroll }) => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scroll;\r\n    }\r\n  }, [scroll]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: ganttHeight, marginTop: headerHeight }}\r\n      className={styles.scroll}\r\n      onScroll={onScroll}\r\n      ref={scrollRef}\r\n    >\r\n      <div style={{ height: ganttFullHeight, width: 1 }} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport type TaskListProps = {\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  rowHeight: number;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  locale: string;\r\n  tasks: Task[];\r\n  taskListRef: React.RefObject<HTMLDivElement>;\r\n  horizontalContainerClass?: string;\r\n  selectedTask: BarTask | undefined;\r\n  setSelectedTask: (task: string) => void;\r\n  TaskListHeader: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n    selectedTaskId: string;\r\n    setSelectedTask: (taskId: string) => void;\r\n  }>;\r\n};\r\n\r\nexport const TaskList: React.FC<TaskListProps> = ({\r\n  headerHeight,\r\n  fontFamily,\r\n  fontSize,\r\n  rowWidth,\r\n  rowHeight,\r\n  scrollY,\r\n  tasks,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  locale,\r\n  ganttHeight,\r\n  taskListRef,\r\n  horizontalContainerClass,\r\n  TaskListHeader,\r\n  TaskListTable,\r\n}) => {\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  const headerProps = {\r\n    headerHeight,\r\n    fontFamily,\r\n    fontSize,\r\n    rowWidth,\r\n  };\r\n  const selectedTaskId = selectedTask ? selectedTask.id : \"\";\r\n  const tableProps = {\r\n    rowHeight,\r\n    rowWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks,\r\n    locale,\r\n    selectedTaskId: selectedTaskId,\r\n    setSelectedTask,\r\n  };\r\n\r\n  return (\r\n    <div ref={taskListRef}>\r\n      <TaskListHeader {...headerProps} />\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={horizontalContainerClass}\r\n        style={ganttHeight ? { height: ganttHeight } : {}}\r\n      >\r\n        <TaskListTable {...tableProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  svgWidth: number;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  svgWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = 0;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [\r\n    <line\r\n      key=\"RowLineFirst\"\r\n      x=\"0\"\r\n      y1={0}\r\n      x2={svgWidth}\r\n      y2={0}\r\n      className={styles.gridRowLine}\r\n    />,\r\n  ];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={svgWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={svgWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={0}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\n\r\nexport type GridProps = GridBodyProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport { DateSetup } from \"../../types/date-setup\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dateSetup: DateSetup;\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dateSetup,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dateSetup.dates.length; i++) {\r\n      const date = dateSetup.dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i === 0 ||\r\n        date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()\r\n      ) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 1;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (dateSetup.viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      <rect\r\n        x={0}\r\n        y={0}\r\n        width={columnWidth * dateSetup.dates.length}\r\n        height={headerHeight}\r\n        className={styles.calendarHeader}\r\n      />\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  taskHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  taskHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskHeight / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskHeight / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask, TaskTypeInternal } from \"../types/bar-task\";\r\nimport { BarMoveAction } from \"../types/gantt-task-actions\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string,\r\n  projectProgressColor: string,\r\n  projectProgressSelectedColor: string,\r\n  projectBackgroundColor: string,\r\n  projectBackgroundSelectedColor: string,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n) => {\r\n  const dateDelta =\r\n    dates[1].getTime() -\r\n    dates[0].getTime() -\r\n    dates[1].getTimezoneOffset() * 60 * 1000 +\r\n    dates[0].getTimezoneOffset() * 60 * 1000;\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor,\r\n      projectProgressColor,\r\n      projectProgressSelectedColor,\r\n      projectBackgroundColor,\r\n      projectBackgroundSelectedColor,\r\n      milestoneBackgroundColor,\r\n      milestoneBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  // set dependencies\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nconst convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string,\r\n  projectProgressColor: string,\r\n  projectProgressSelectedColor: string,\r\n  projectBackgroundColor: string,\r\n  projectBackgroundSelectedColor: string,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n): BarTask => {\r\n  let barTask: BarTask;\r\n  switch (task.type) {\r\n    case \"milestone\":\r\n      barTask = convertToMilestone(\r\n        task,\r\n        index,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        milestoneBackgroundColor,\r\n        milestoneBackgroundSelectedColor\r\n      );\r\n      break;\r\n    case \"project\":\r\n      barTask = convertToBar(\r\n        task,\r\n        index,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        projectProgressColor,\r\n        projectProgressSelectedColor,\r\n        projectBackgroundColor,\r\n        projectBackgroundSelectedColor\r\n      );\r\n      break;\r\n    default:\r\n      barTask = convertToBar(\r\n        task,\r\n        index,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      );\r\n      break;\r\n  }\r\n  return barTask;\r\n};\r\n\r\nconst convertToBar = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  let x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  let typeInternal: TaskTypeInternal = task.type;\r\n  if (typeInternal === \"task\" && x2 - x1 < handleWidth * 2) {\r\n    typeInternal = \"smalltask\";\r\n    x2 = x1 + handleWidth * 2;\r\n  }\r\n  return {\r\n    ...task,\r\n    typeInternal,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nconst convertToMilestone = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n) => {\r\n  const x = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const x1 = x - taskHeight * 0.5;\r\n  const x2 = x + taskHeight * 0.5;\r\n\r\n  const rotatedHeight = taskHeight / 1.414;\r\n  const styles = {\r\n    backgroundColor: milestoneBackgroundColor,\r\n    backgroundSelectedColor: milestoneBackgroundSelectedColor,\r\n    progressColor: \"\",\r\n    progressSelectedColor: \"\",\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    end: task.start,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    typeInternal: task.type,\r\n    progress: 0,\r\n    height: rotatedHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nconst taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nconst taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number\r\n) => {\r\n  const y = index * rowHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nconst progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nconst startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nconst endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nconst moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nconst dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n\r\n/**\r\n * Method handles event in real time(mousemove) and on finish(mouseup)\r\n */\r\nexport const handleTaskBySVGMouseEvent = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  let result: { isChanged: boolean; changedTask: BarTask };\r\n  switch (selectedTask.type) {\r\n    case \"milestone\":\r\n      result = handleTaskBySVGMouseEventForMilestone(\r\n        svgX,\r\n        action,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      break;\r\n    default:\r\n      result = handleTaskBySVGMouseEventForBar(\r\n        svgX,\r\n        action,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      break;\r\n  }\r\n  return result;\r\n};\r\n\r\nconst handleTaskBySVGMouseEventForBar = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"progress\":\r\n      changedTask.progress = progressByX(svgX, selectedTask);\r\n      isChanged = changedTask.progress !== selectedTask.progress;\r\n      break;\r\n    case \"start\": {\r\n      const newX1 = startByX(svgX, xStep, selectedTask);\r\n      changedTask.x1 = newX1;\r\n      isChanged = changedTask.x1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"end\": {\r\n      const newX2 = endByX(svgX, xStep, selectedTask);\r\n      changedTask.x2 = newX2;\r\n      isChanged = changedTask.x2 !== selectedTask.x2;\r\n      if (isChanged) {\r\n        changedTask.end = dateByX(\r\n          newX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = dateByX(\r\n          newMoveX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n\r\nconst handleTaskBySVGMouseEventForMilestone = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = changedTask.start;\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n","import { BarTask } from \"../types/bar-task\";\r\nimport { Task } from \"../types/public-types\";\r\n\r\nexport function isKeyboardEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.KeyboardEvent {\r\n  return (event as React.KeyboardEvent).key !== undefined;\r\n}\r\n\r\nexport function isMouseEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.MouseEvent {\r\n  return (event as React.MouseEvent).clientX !== undefined;\r\n}\r\n\r\nexport function isBarTask(task: Task | BarTask): task is BarTask {\r\n  return (task as BarTask).x1 !== undefined;\r\n}\r\n","import React from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\nimport {\n  progressWithByParams,\n  getProgressPoint,\n} from \"../../../helpers/bar-helper\";\nimport { BarDisplay } from \"./bar-display\";\nimport { BarDateHandle } from \"./bar-date-handle\";\nimport { BarProgressHandle } from \"./bar-progress-handle\";\nimport { TaskItemProps } from \"../task-item\";\nimport styles from \"./bar.module.css\";\n\nexport const Bar: React.FC<TaskItemProps> = ({\n  task,\n  isProgressChangeable,\n  isDateChangeable,\n  onEventStart,\n  isSelected,\n}) => {\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\n  const progressPoint = getProgressPoint(\n    progressWidth + task.x1,\n    task.y,\n    task.height\n  );\n  const handleHeight = task.height - 2;\n  return (\n    <g className={styles.barWrapper} tabIndex={0}>\n      <BarDisplay\n        x={task.x1}\n        y={task.y}\n        width={task.x2 - task.x1}\n        height={task.height}\n        progressWidth={progressWidth}\n        barCornerRadius={task.barCornerRadius}\n        styles={task.styles}\n        isSelected={isSelected}\n        onMouseDown={e => {\n          isDateChangeable && onEventStart(\"move\", task, e);\n        }}\n      />\n      <g className=\"handleGroup\">\n        {isDateChangeable && (\n          <g>\n            {/* left */}\n            <BarDateHandle\n              x={task.x1 + 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={handleHeight}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(\"start\", task, e);\n              }}\n            />\n            {/* right */}\n            <BarDateHandle\n              x={task.x2 - task.handleWidth - 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={handleHeight}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(\"end\", task, e);\n              }}\n            />\n          </g>\n        )}\n        {isProgressChangeable && (\n          <BarProgressHandle\n            progressPoint={progressPoint}\n            onMouseDown={e => {\n              onEventStart(\"progress\", task, e);\n            }}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n","import React from \"react\";\r\nimport {\r\n  progressWithByParams,\r\n  getProgressPoint,\r\n} from \"../../../helpers/bar-helper\";\r\nimport { BarDisplay } from \"./bar-display\";\r\nimport { BarProgressHandle } from \"./bar-progress-handle\";\r\nimport { TaskItemProps } from \"../task-item\";\r\nimport styles from \"./bar.module.css\";\r\n\r\nexport const BarSmall: React.FC<TaskItemProps> = ({\r\n  task,\r\n  isProgressChangeable,\r\n  isDateChangeable,\r\n  onEventStart,\r\n  isSelected,\r\n}) => {\r\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\r\n  const progressPoint = getProgressPoint(\r\n    progressWidth + task.x1,\r\n    task.y,\r\n    task.height\r\n  );\r\n  return (\r\n    <g className={styles.barWrapper} tabIndex={0}>\r\n      <BarDisplay\r\n        x={task.x1}\r\n        y={task.y}\r\n        width={task.x2 - task.x1}\r\n        height={task.height}\r\n        progressWidth={progressWidth}\r\n        barCornerRadius={task.barCornerRadius}\r\n        styles={task.styles}\r\n        isSelected={isSelected}\r\n        onMouseDown={e => {\r\n          isDateChangeable && onEventStart(\"move\", task, e);\r\n        }}\r\n      />\r\n      <g className=\"handleGroup\">\r\n        {isProgressChangeable && (\r\n          <BarProgressHandle\r\n            progressPoint={progressPoint}\r\n            onMouseDown={e => {\r\n              onEventStart(\"progress\", task, e);\r\n            }}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TaskItemProps } from \"../task-item\";\r\nimport styles from \"./milestone.module.css\";\r\n\r\nexport const Milestone: React.FC<TaskItemProps> = ({\r\n  task,\r\n  isDateChangeable,\r\n  onEventStart,\r\n  isSelected,\r\n}) => {\r\n  const transform = `rotate(45 ${task.x1 + task.height * 0.356} \r\n    ${task.y + task.height * 0.85})`;\r\n  const getBarColor = () => {\r\n    return isSelected\r\n      ? task.styles.backgroundSelectedColor\r\n      : task.styles.backgroundColor;\r\n  };\r\n\r\n  return (\r\n    <g tabIndex={0} className={styles.milestoneWrapper}>\r\n      <rect\r\n        fill={getBarColor()}\r\n        x={task.x1}\r\n        width={task.height}\r\n        y={task.y}\r\n        height={task.height}\r\n        rx={task.barCornerRadius}\r\n        ry={task.barCornerRadius}\r\n        transform={transform}\r\n        className={styles.milestoneBackground}\r\n        onMouseDown={e => {\r\n          isDateChangeable && onEventStart(\"move\", task, e);\r\n        }}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { progressWithByParams } from \"../../../helpers/bar-helper\";\r\nimport { TaskItemProps } from \"../task-item\";\r\nimport styles from \"./project.module.css\";\r\n\r\nexport const Project: React.FC<TaskItemProps> = ({ task, isSelected }) => {\r\n  const barColor = isSelected\r\n    ? task.styles.backgroundSelectedColor\r\n    : task.styles.backgroundColor;\r\n  const processColor = isSelected\r\n    ? task.styles.progressSelectedColor\r\n    : task.styles.progressColor;\r\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\r\n  const projectWith = task.x2 - task.x1;\r\n\r\n  const projectLeftTriangle = [\r\n    task.x1,\r\n    task.y + task.height / 2 - 1,\r\n    task.x1,\r\n    task.y + task.height,\r\n    task.x1 + 15,\r\n    task.y + task.height / 2 - 1,\r\n  ].join(\",\");\r\n  const projectRightTriangle = [\r\n    task.x2,\r\n    task.y + task.height / 2 - 1,\r\n    task.x2,\r\n    task.y + task.height,\r\n    task.x2 - 15,\r\n    task.y + task.height / 2 - 1,\r\n  ].join(\",\");\r\n\r\n  return (\r\n    <g tabIndex={0} className={styles.projectWrapper}>\r\n      <rect\r\n        fill={barColor}\r\n        x={task.x1}\r\n        width={projectWith}\r\n        y={task.y}\r\n        height={task.height}\r\n        rx={task.barCornerRadius}\r\n        ry={task.barCornerRadius}\r\n        className={styles.projectBackground}\r\n      />\r\n      <rect\r\n        x={task.x1}\r\n        width={progressWidth}\r\n        y={task.y}\r\n        height={task.height}\r\n        ry={task.barCornerRadius}\r\n        rx={task.barCornerRadius}\r\n        fill={processColor}\r\n      />\r\n      <rect\r\n        fill={barColor}\r\n        x={task.x1}\r\n        width={projectWith}\r\n        y={task.y}\r\n        height={task.height / 2}\r\n        rx={task.barCornerRadius}\r\n        ry={task.barCornerRadius}\r\n        className={styles.projectTop}\r\n      />\r\n      <polygon\r\n        className={styles.projectTop}\r\n        points={projectLeftTriangle}\r\n        fill={barColor}\r\n      />\r\n      <polygon\r\n        className={styles.projectTop}\r\n        points={projectRightTriangle}\r\n        fill={barColor}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { GanttContentMoveAction } from \"../../types/gantt-task-actions\";\r\nimport { Bar } from \"./bar/bar\";\r\nimport { BarSmall } from \"./bar/bar-small\";\r\nimport { Milestone } from \"./milestone/milestone\";\r\nimport { Project } from \"./project/project\";\r\nimport style from \"./task-list.module.css\";\r\n\r\nexport type TaskItemProps = {\r\n  task: BarTask;\r\n  arrowIndent: number;\r\n  taskHeight: number;\r\n  isProgressChangeable: boolean;\r\n  isDateChangeable: boolean;\r\n  isDelete: boolean;\r\n  isSelected: boolean;\r\n  onEventStart: (\r\n    action: GanttContentMoveAction,\r\n    selectedTask: BarTask,\r\n    event?: React.MouseEvent | React.KeyboardEvent\r\n  ) => any;\r\n};\r\n\r\nexport const TaskItem: React.FC<TaskItemProps> = props => {\r\n  const {\r\n    task,\r\n    arrowIndent,\r\n    isDelete,\r\n    taskHeight,\r\n    isSelected,\r\n    onEventStart,\r\n  } = {\r\n    ...props,\r\n  };\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [taskItem, setTaskItem] = useState<JSX.Element>(<div />);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    switch (task.typeInternal) {\r\n      case \"milestone\":\r\n        setTaskItem(<Milestone {...props} />);\r\n        break;\r\n      case \"project\":\r\n        setTaskItem(<Project {...props} />);\r\n        break;\r\n      case \"smalltask\":\r\n        setTaskItem(<BarSmall {...props} />);\r\n        break;\r\n      default:\r\n        setTaskItem(<Bar {...props} />);\r\n        break;\r\n    }\r\n  }, [task, isSelected]);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current) {\r\n      setIsTextInside(textRef.current.getBBox().width < task.x2 - task.x1);\r\n    }\r\n  }, [textRef, task]);\r\n\r\n  const getX = () => {\r\n    const width = task.x2 - task.x1;\r\n    const hasChild = task.barChildren.length > 0;\r\n    return isTextInside\r\n      ? task.x1 + width * 0.5\r\n      : task.x1 + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g\r\n      onKeyDown={e => {\r\n        switch (e.key) {\r\n          case \"Delete\": {\r\n            if (isDelete) onEventStart(\"delete\", task, e);\r\n            break;\r\n          }\r\n        }\r\n        e.stopPropagation();\r\n      }}\r\n      onMouseEnter={e => {\r\n        onEventStart(\"mouseenter\", task, e);\r\n      }}\r\n      onMouseLeave={e => {\r\n        onEventStart(\"mouseleave\", task, e);\r\n      }}\r\n      onDoubleClick={e => {\r\n        onEventStart(\"dblclick\", task, e);\r\n      }}\r\n      onFocus={() => {\r\n        onEventStart(\"select\", task);\r\n      }}\r\n    >\r\n      {taskItem}\r\n      <text\r\n        x={getX()}\r\n        y={task.y + taskHeight * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {task.name}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../other/arrow\";\r\nimport { handleTaskBySVGMouseEvent } from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../other/tooltip\";\r\nimport { isKeyboardEvent } from \"../../helpers/other-helper\";\r\nimport { TaskItem } from \"../task-item/task-item\";\r\nimport {\r\n  BarMoveAction,\r\n  GanttContentMoveAction,\r\n  GanttEvent,\r\n} from \"../../types/gantt-task-actions\";\r\n\r\nexport type TaskGanttContentProps = {\r\n  tasks: BarTask[];\r\n  dates: Date[];\r\n  ganttEvent: GanttEvent;\r\n  selectedTask: BarTask | undefined;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  timeStep: number;\r\n  svg?: React.RefObject<SVGSVGElement>;\r\n  svgHeight: number;\r\n  svgWidth: number;\r\n  displayXStartEndpoint?: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n  taskHeight: number;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  setGanttEvent: (value: GanttEvent) => void;\r\n  setFailedTask: (value: BarTask | null) => void;\r\n  setSelectedTask: (taskId: string) => void;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n} & EventOption;\r\n\r\nexport const TaskGanttContent: React.FC<TaskGanttContentProps> = ({\r\n  tasks,\r\n  dates,\r\n  ganttEvent,\r\n  selectedTask,\r\n  rowHeight,\r\n  columnWidth,\r\n  timeStep,\r\n  svg,\r\n  svgHeight,\r\n  displayXStartEndpoint,\r\n  taskHeight,\r\n  arrowColor,\r\n  arrowIndent,\r\n  fontFamily,\r\n  fontSize,\r\n  setGanttEvent,\r\n  setFailedTask,\r\n  setSelectedTask,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onDelete,\r\n  TooltipContent,\r\n}) => {\r\n  const point = svg?.current?.createSVGPoint();\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // create xStep\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    setXStep(newXStep);\r\n  }, [columnWidth, dates, timeStep]);\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = async (event: MouseEvent) => {\r\n      if (!ganttEvent.changedTask || !point || !svg?.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { isChanged, changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        ganttEvent.action as BarMoveAction,\r\n        ganttEvent.changedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (isChanged) {\r\n        setGanttEvent({ action: ganttEvent.action, changedTask });\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = async (event: MouseEvent) => {\r\n      const { action, originalSelectedTask, changedTask } = ganttEvent;\r\n      if (!changedTask || !point || !svg?.current || !originalSelectedTask)\r\n        return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n      const { changedTask: newChangedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        action as BarMoveAction,\r\n        changedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n\r\n      const isNotLikeOriginal =\r\n        originalSelectedTask.start !== newChangedTask.start ||\r\n        originalSelectedTask.end !== newChangedTask.end ||\r\n        originalSelectedTask.progress !== newChangedTask.progress;\r\n\r\n      // remove listeners\r\n      svg.current.removeEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.removeEventListener(\"mouseup\", handleMouseUp);\r\n      setGanttEvent({ action: \"\" });\r\n      setIsMoving(false);\r\n\r\n      // custom operation start\r\n      let operationSuccess = true;\r\n      if (\r\n        (action === \"move\" || action === \"end\" || action === \"start\") &&\r\n        onDateChange &&\r\n        isNotLikeOriginal\r\n      ) {\r\n        try {\r\n          const result = await onDateChange(newChangedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      } else if (onProgressChange && isNotLikeOriginal) {\r\n        try {\r\n          const result = await onProgressChange(newChangedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      }\r\n\r\n      // If operation is failed - return old state\r\n      if (!operationSuccess) {\r\n        setFailedTask(originalSelectedTask);\r\n      }\r\n    };\r\n\r\n    if (\r\n      !isMoving &&\r\n      (ganttEvent.action === \"move\" ||\r\n        ganttEvent.action === \"end\" ||\r\n        ganttEvent.action === \"start\" ||\r\n        ganttEvent.action === \"progress\") &&\r\n      svg?.current\r\n    ) {\r\n      svg.current.addEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.addEventListener(\"mouseup\", handleMouseUp);\r\n      setIsMoving(true);\r\n    }\r\n  }, [\r\n    ganttEvent,\r\n    xStep,\r\n    initEventX1Delta,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n    svg,\r\n    isMoving,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   */\r\n  const handleBarEventStart = async (\r\n    action: GanttContentMoveAction,\r\n    task: BarTask,\r\n    event?: React.MouseEvent | React.KeyboardEvent\r\n  ) => {\r\n    if (!event) {\r\n      if (action === \"select\") {\r\n        setSelectedTask(task.id);\r\n      }\r\n    }\r\n    // Keyboard events\r\n    else if (isKeyboardEvent(event)) {\r\n      if (action === \"delete\") {\r\n        if (onDelete) {\r\n          try {\r\n            const result = await onDelete(task);\r\n            if (result !== undefined && result) {\r\n              setGanttEvent({ action, changedTask: task });\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error on Delete. \" + error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Mouse Events\r\n    else if (action === \"mouseenter\") {\r\n      if (!ganttEvent.action) {\r\n        setGanttEvent({\r\n          action,\r\n          changedTask: task,\r\n          originalSelectedTask: task,\r\n        });\r\n      }\r\n    } else if (action === \"mouseleave\") {\r\n      if (ganttEvent.action === \"mouseenter\") {\r\n        setGanttEvent({ action: \"\" });\r\n      }\r\n    } else if (action === \"dblclick\") {\r\n      !!onDoubleClick && onDoubleClick(task);\r\n    }\r\n    // Change task event start\r\n    else if (action === \"move\") {\r\n      if (!svg?.current || !point) return;\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n      setInitEventX1Delta(cursor.x - task.x1);\r\n      setGanttEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalSelectedTask: task,\r\n      });\r\n    } else {\r\n      setGanttEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalSelectedTask: task,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {tasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${tasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={tasks[child]}\r\n                rowHeight={rowHeight}\r\n                taskHeight={taskHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {tasks.map(task => {\r\n          return (\r\n            <TaskItem\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              taskHeight={taskHeight}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              isDelete={!task.isDisabled}\r\n              onEventStart={handleBarEventStart}\r\n              key={task.id}\r\n              isSelected={!!selectedTask && task.id === selectedTask.id}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {ganttEvent.changedTask && displayXStartEndpoint && (\r\n          <Tooltip\r\n            arrowIndent={arrowIndent}\r\n            rowHeight={rowHeight}\r\n            svgHeight={svgHeight}\r\n            displayXStartEndpoint={displayXStartEndpoint}\r\n            task={ganttEvent.changedTask}\r\n            fontFamily={fontFamily}\r\n            fontSize={fontSize}\r\n            TooltipContent={TooltipContent}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { GridProps, Grid } from \"../grid/grid\";\r\nimport { CalendarProps, Calendar } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps, TaskGanttContent } from \"./task-gantt-content\";\r\nimport styles from \"./gantt.module.css\";\r\n\r\nexport type TaskGanttProps = {\r\n  gridProps: GridProps;\r\n  calendarProps: CalendarProps;\r\n  barProps: TaskGanttContentProps;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  scrollX: number;\r\n  verticalGanttContainerRef: React.RefObject<HTMLDivElement>;\r\n};\r\nexport const TaskGantt: React.FC<TaskGanttProps> = ({\r\n  gridProps,\r\n  calendarProps,\r\n  barProps,\r\n  ganttHeight,\r\n  scrollY,\r\n  scrollX,\r\n  verticalGanttContainerRef,\r\n}) => {\r\n  const ganttSVGRef = useRef<SVGSVGElement>(null);\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  const [displayXStartEndpoint, setDisplayXStartEndpoint] = useState({\r\n    start: 0,\r\n    end: 0,\r\n  });\r\n  const newBarProps = { ...barProps, svg: ganttSVGRef, displayXStartEndpoint };\r\n\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  useEffect(() => {\r\n    if (verticalGanttContainerRef.current) {\r\n      verticalGanttContainerRef.current.scrollLeft = scrollX;\r\n      setDisplayXStartEndpoint({\r\n        start: scrollX,\r\n        end: verticalGanttContainerRef.current.clientWidth + scrollX,\r\n      });\r\n    }\r\n    // verticalContainerRef.current?.clientWidth need for resize window tracking\r\n  }, [scrollX, verticalGanttContainerRef.current?.clientWidth]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.ganttVerticalContainer}\r\n      ref={verticalGanttContainerRef}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={gridProps.svgWidth}\r\n        height={calendarProps.headerHeight}\r\n        fontFamily={barProps.fontFamily}\r\n      >\r\n        <Calendar {...calendarProps} />\r\n      </svg>\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={styles.horizontalContainer}\r\n        style={\r\n          ganttHeight\r\n            ? { height: ganttHeight, width: gridProps.svgWidth }\r\n            : { width: gridProps.svgWidth }\r\n        }\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={gridProps.svgWidth}\r\n          height={barProps.rowHeight * barProps.tasks.length}\r\n          fontFamily={barProps.fontFamily}\r\n          ref={ganttSVGRef}\r\n        >\r\n          <Grid {...gridProps} />\r\n          <TaskGanttContent {...newBarProps} />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport styles from \"./horizontal-scroll.module.css\";\r\n\r\nexport const HorizontalScroll: React.FC<{\r\n  scroll: number;\r\n  svgWidth: number;\r\n  taskListWidth: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n}> = ({ scroll, svgWidth, taskListWidth, onScroll }) => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollLeft = scroll;\r\n    }\r\n  }, [scroll]);\r\n\r\n  return (\r\n    <div\r\n      style={{ marginLeft: taskListWidth }}\r\n      className={styles.scroll}\r\n      onScroll={onScroll}\r\n      ref={scrollRef}\r\n    >\r\n      <div style={{ width: svgWidth, height: 1 }} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport { ViewMode, GanttProps } from \"../../types/public-types\";\r\nimport { GridProps } from \"../grid/grid\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\nimport { CalendarProps } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps } from \"./task-gantt-content\";\r\nimport { TaskListHeaderDefault } from \"../task-list/task-list-header\";\r\nimport { TaskListTableDefault } from \"../task-list/task-list-table\";\r\nimport { StandardTooltipContent } from \"../other/tooltip\";\r\nimport { VerticalScroll } from \"../other/vertical-scroll\";\r\nimport { TaskListProps, TaskList } from \"../task-list/task-list\";\r\nimport { TaskGantt } from \"./task-gantt\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { convertToBarTasks } from \"../../helpers/bar-helper\";\r\nimport { GanttEvent } from \"../../types/gantt-task-actions\";\r\nimport { DateSetup } from \"../../types/date-setup\";\r\nimport styles from \"./gantt.module.css\";\r\nimport { HorizontalScroll } from \"../other/horizontal-scroll\";\r\n\r\nexport const Gantt: React.FunctionComponent<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  listCellWidth = \"155px\",\r\n  rowHeight = 50,\r\n  ganttHeight = 0,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  projectProgressColor = \"#7db59a\",\r\n  projectProgressSelectedColor = \"#59a985\",\r\n  projectBackgroundColor = \"#fac465\",\r\n  projectBackgroundSelectedColor = \"#f7bb53\",\r\n  milestoneBackgroundColor = \"#f1c453\",\r\n  milestoneBackgroundSelectedColor = \"#f29e4c\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  TooltipContent = StandardTooltipContent,\r\n  TaskListHeader = TaskListHeaderDefault,\r\n  TaskListTable = TaskListTableDefault,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onDelete,\r\n  onSelect,\r\n}) => {\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n  const taskListRef = useRef<HTMLDivElement>(null);\r\n  const verticalGanttContainerRef = useRef<HTMLDivElement>(null);\r\n  const [dateSetup, setDateSetup] = useState<DateSetup>(() => {\r\n    const [startDate, endDate] = ganttDateRange(tasks, viewMode);\r\n    return { viewMode, dates: seedDates(startDate, endDate, viewMode) };\r\n  });\r\n\r\n  const [taskHeight, setTaskHeight] = useState((rowHeight * barFill) / 100);\r\n  const [taskListWidth, setTaskListWidth] = useState(0);\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [ganttEvent, setGanttEvent] = useState<GanttEvent>({\r\n    action: \"\",\r\n  });\r\n\r\n  const [selectedTask, setSelectedTask] = useState<BarTask>();\r\n  const [failedTask, setFailedTask] = useState<BarTask | null>(null);\r\n\r\n  const [scrollY, setScrollY] = useState(0);\r\n  const [scrollX, setScrollX] = useState(0);\r\n  const [ignoreScrollEvent, setIgnoreScrollEvent] = useState(false);\r\n\r\n  const svgHeight = rowHeight * barTasks.length;\r\n  const svgWidth = dateSetup.dates.length * columnWidth;\r\n  const ganttFullHeight = barTasks.length * rowHeight;\r\n\r\n  // task change events\r\n  useEffect(() => {\r\n    const [startDate, endDate] = ganttDateRange(tasks, viewMode);\r\n    const newDates = seedDates(startDate, endDate, viewMode);\r\n    setDateSetup({ dates: newDates, viewMode });\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        newDates,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor,\r\n        projectProgressColor,\r\n        projectProgressSelectedColor,\r\n        projectBackgroundColor,\r\n        projectBackgroundSelectedColor,\r\n        milestoneBackgroundColor,\r\n        milestoneBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    viewMode,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    taskHeight,\r\n    handleWidth,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n    projectProgressColor,\r\n    projectProgressSelectedColor,\r\n    projectBackgroundColor,\r\n    projectBackgroundSelectedColor,\r\n    milestoneBackgroundColor,\r\n    milestoneBackgroundSelectedColor,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const { changedTask, action } = ganttEvent;\r\n    if (changedTask) {\r\n      if (action === \"delete\") {\r\n        setGanttEvent({ action: \"\" });\r\n        setBarTasks(barTasks.filter(t => t.id !== changedTask.id));\r\n      } else if (\r\n        action === \"move\" ||\r\n        action === \"end\" ||\r\n        action === \"start\" ||\r\n        action === \"progress\"\r\n      ) {\r\n        const prevStateTask = barTasks.find(t => t.id === changedTask.id);\r\n        if (\r\n          prevStateTask &&\r\n          (prevStateTask.start.getTime() !== changedTask.start.getTime() ||\r\n            prevStateTask.end.getTime() !== changedTask.end.getTime() ||\r\n            prevStateTask.progress !== changedTask.progress)\r\n        ) {\r\n          // actions for change\r\n          const newTaskList = barTasks.map(t =>\r\n            t.id === changedTask.id ? changedTask : t\r\n          );\r\n          setBarTasks(newTaskList);\r\n        }\r\n      }\r\n    }\r\n  }, [ganttEvent, barTasks]);\r\n\r\n  useEffect(() => {\r\n    if (failedTask) {\r\n      setBarTasks(barTasks.map(t => (t.id !== failedTask.id ? t : failedTask)));\r\n      setFailedTask(null);\r\n    }\r\n  }, [failedTask, barTasks]);\r\n\r\n  useEffect(() => {\r\n    const newTaskHeight = (rowHeight * barFill) / 100;\r\n    if (newTaskHeight !== taskHeight) {\r\n      setTaskHeight(newTaskHeight);\r\n    }\r\n  }, [rowHeight, barFill, taskHeight]);\r\n\r\n  useEffect(() => {\r\n    if (taskListRef.current) {\r\n      setTaskListWidth(taskListRef.current.offsetWidth);\r\n    }\r\n  }, [taskListRef]);\r\n\r\n  // scroll events\r\n  useEffect(() => {\r\n    const handleWheel = (event: WheelEvent) => {\r\n      if (event.shiftKey || event.deltaX) {\r\n        const scrollMove = event.deltaX ? event.deltaX : event.deltaY;\r\n        let newScrollX = scrollX + scrollMove;\r\n        if (newScrollX < 0) {\r\n          newScrollX = 0;\r\n        } else if (newScrollX > svgWidth) {\r\n          newScrollX = svgWidth;\r\n        }\r\n        setScrollX(newScrollX);\r\n        event.preventDefault();\r\n      } else {\r\n        let newScrollY = scrollY + event.deltaY;\r\n        if (newScrollY < 0) {\r\n          newScrollY = 0;\r\n        } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n          newScrollY = ganttFullHeight - ganttHeight;\r\n        }\r\n        if (newScrollY !== scrollY) {\r\n          setScrollY(newScrollY);\r\n          event.preventDefault();\r\n        }\r\n      }\r\n\r\n      setIgnoreScrollEvent(true);\r\n    };\r\n\r\n    // subscribe if scroll is necessary\r\n    if (wrapperRef.current) {\r\n      wrapperRef.current.addEventListener(\"wheel\", handleWheel, {\r\n        passive: false,\r\n      });\r\n    }\r\n    return () => {\r\n      if (wrapperRef.current) {\r\n        wrapperRef.current.removeEventListener(\"wheel\", handleWheel);\r\n      }\r\n    };\r\n  }, [wrapperRef.current, scrollY, scrollX, ganttHeight, svgWidth]);\r\n\r\n  const handleScrollY = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollY !== event.currentTarget.scrollTop && !ignoreScrollEvent) {\r\n      setScrollY(event.currentTarget.scrollTop);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  const handleScrollX = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollX !== event.currentTarget.scrollLeft && !ignoreScrollEvent) {\r\n      setScrollX(event.currentTarget.scrollLeft);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  /**\r\n   * Handles arrow keys events and transform it to new scroll\r\n   */\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    let newScrollY = scrollY;\r\n    let newScrollX = scrollX;\r\n    let isX = true;\r\n    switch (event.key) {\r\n      case \"Down\": // IE/Edge specific value\r\n      case \"ArrowDown\":\r\n        newScrollY += rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Up\": // IE/Edge specific value\r\n      case \"ArrowUp\":\r\n        newScrollY -= rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Left\":\r\n      case \"ArrowLeft\":\r\n        newScrollX -= columnWidth;\r\n        break;\r\n      case \"Right\": // IE/Edge specific value\r\n      case \"ArrowRight\":\r\n        newScrollX += columnWidth;\r\n        break;\r\n    }\r\n    if (isX) {\r\n      if (newScrollX < 0) {\r\n        newScrollX = 0;\r\n      } else if (newScrollX > svgWidth) {\r\n        newScrollX = svgWidth;\r\n      }\r\n      setScrollX(newScrollX);\r\n    } else {\r\n      if (newScrollY < 0) {\r\n        newScrollY = 0;\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        newScrollY = ganttFullHeight - ganttHeight;\r\n      }\r\n      setScrollY(newScrollY);\r\n    }\r\n    setIgnoreScrollEvent(true);\r\n  };\r\n\r\n  /**\r\n   * Task select event\r\n   */\r\n  const handleSelectedTask = (taskId: string) => {\r\n    const newSelectedTask = barTasks.find(t => t.id === taskId);\r\n    const oldSelectedTask = barTasks.find(\r\n      t => !!selectedTask && t.id === selectedTask.id\r\n    );\r\n    if (onSelect) {\r\n      if (oldSelectedTask) {\r\n        onSelect(oldSelectedTask, false);\r\n      }\r\n      if (newSelectedTask) {\r\n        onSelect(newSelectedTask, true);\r\n      }\r\n    }\r\n    setSelectedTask(newSelectedTask);\r\n  };\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    svgWidth,\r\n    tasks: tasks,\r\n    rowHeight,\r\n    dates: dateSetup.dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dateSetup,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: TaskGanttContentProps = {\r\n    tasks: barTasks,\r\n    dates: dateSetup.dates,\r\n    ganttEvent,\r\n    selectedTask,\r\n    rowHeight,\r\n    taskHeight,\r\n    columnWidth,\r\n    arrowColor,\r\n    timeStep,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    svgHeight,\r\n    svgWidth,\r\n    setGanttEvent,\r\n    setFailedTask,\r\n    setSelectedTask: handleSelectedTask,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onDelete,\r\n    TooltipContent,\r\n  };\r\n\r\n  const tableProps: TaskListProps = {\r\n    rowHeight,\r\n    rowWidth: listCellWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks: barTasks,\r\n    locale,\r\n    headerHeight,\r\n    scrollY,\r\n    ganttHeight,\r\n    horizontalContainerClass: styles.horizontalContainer,\r\n    selectedTask,\r\n    taskListRef,\r\n    setSelectedTask: handleSelectedTask,\r\n    TaskListHeader,\r\n    TaskListTable,\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        className={styles.wrapper}\r\n        onKeyDown={handleKeyDown}\r\n        tabIndex={0}\r\n        ref={wrapperRef}\r\n        // onWheel={handleWheel}\r\n      >\r\n        {listCellWidth && <TaskList {...tableProps} />}\r\n        <TaskGantt\r\n          gridProps={gridProps}\r\n          calendarProps={calendarProps}\r\n          barProps={barProps}\r\n          ganttHeight={ganttHeight}\r\n          scrollY={scrollY}\r\n          scrollX={scrollX}\r\n          verticalGanttContainerRef={verticalGanttContainerRef}\r\n        />\r\n        <VerticalScroll\r\n          ganttFullHeight={ganttFullHeight}\r\n          ganttHeight={ganttHeight}\r\n          headerHeight={headerHeight}\r\n          scroll={scrollY}\r\n          onScroll={handleScrollY}\r\n        />\r\n      </div>\r\n      <HorizontalScroll\r\n        svgWidth={svgWidth}\r\n        taskListWidth={taskListWidth}\r\n        scroll={scrollX}\r\n        onScroll={handleScrollX}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  isChecked: boolean;\r\n  onViewListChange: (isChecked: boolean) => void;\r\n  onViewModeChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewModeChange,\r\n  onViewListChange,\r\n  isChecked,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.HalfDay)}\r\n      >\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewModeChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Week)}\r\n      >\r\n        Week\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Month)}\r\n      >\r\n        Month\r\n      </button>\r\n\r\n      <div className=\"Switch\">\r\n        <label className=\"Switch_Toggle\">\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={isChecked}\r\n            onClick={() => onViewListChange(!isChecked)}\r\n          />\r\n          <span className=\"Slider\" />\r\n        </label>\r\n        Show Task List\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Task, ViewMode, Gantt } from \"gantt-task-react\";\r\nimport { ViewSwitcher } from \"./components/view-switcher\";\r\nimport { getStartEndDateForProject, initTasks } from \"./helper\";\r\nimport \"gantt-task-react/dist/index.css\";\r\n\r\n//Init\r\nconst App = () => {\r\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\r\n  const [tasks, setTasks] = React.useState<Task[]>(initTasks());\r\n  const [isChecked, setIsChecked] = React.useState(true);\r\n  let columnWidth = 60;\r\n  if (view === ViewMode.Month) {\r\n    columnWidth = 300;\r\n  } else if (view === ViewMode.Week) {\r\n    columnWidth = 250;\r\n  }\r\n\r\n  const onTaskChange = (task: Task) => {\r\n    console.log(\"On date change Id:\" + task.id);\r\n    let newTasks = tasks.map(t => (t.id === task.id ? task : t));\r\n    if (task.project) {\r\n      const [start, end] = getStartEndDateForProject(newTasks, task.project);\r\n      const project = newTasks[newTasks.findIndex(t => t.id === task.project)];\r\n      if (\r\n        project.start.getTime() !== start.getTime() ||\r\n        project.end.getTime() !== end.getTime()\r\n      ) {\r\n        const changedProject = { ...project, start, end };\r\n        newTasks = newTasks.map(t =>\r\n          t.id === task.project ? changedProject : t\r\n        );\r\n      }\r\n    }\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const onTaskDelete = (task: Task) => {\r\n    const conf = window.confirm(\"Are you sure about \" + task.name + \" ?\");\r\n    if (conf) {\r\n      setTasks(tasks.filter(t => t.id !== task.id));\r\n    }\r\n    return conf;\r\n  };\r\n\r\n  const onProgressChange = async (task: Task) => {\r\n    setTasks(tasks.map(t => (t.id === task.id ? task : t)));\r\n    console.log(\"On progress change Id:\" + task.id);\r\n  };\r\n\r\n  const onDblClick = (task: Task) => {\r\n    alert(\"On Double Click event Id:\" + task.id);\r\n  };\r\n\r\n  const onSelect = (task: Task, isSelected: boolean) => {\r\n    console.log(task.name + \" has \" + (isSelected ? \"selected\" : \"unselected\"));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ViewSwitcher\r\n        onViewModeChange={viewMode => setView(viewMode)}\r\n        onViewListChange={setIsChecked}\r\n        isChecked={isChecked}\r\n      />\r\n      <h3>Gantt With Unlimited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        columnWidth={columnWidth}\r\n      />\r\n      <h3 style={{ color: \"#e56b6f\" }}>\r\n        Milestones and projects are not available\r\n      </h3>\r\n      <h3>Gantt With Limited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        ganttHeight={300}\r\n        columnWidth={columnWidth}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { Task } from \"../../dist/types/public-types\";\r\n\r\nexport function initTasks() {\r\n  const currentDate = new Date();\r\n  const tasks: Task[] = [\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\r\n      name: \"Some Project\",\r\n      id: \"ProjectSample\",\r\n      progress: 25,\r\n      type: \"project\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\r\n      end: new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        2,\r\n        12,\r\n        28\r\n      ),\r\n      name: \"Idea\",\r\n      id: \"Task 0\",\r\n      progress: 45,\r\n      type: \"task\",\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\r\n      name: \"Research\",\r\n      id: \"Task 1\",\r\n      progress: 25,\r\n      dependencies: [\"Task 0\"],\r\n      type: \"task\",\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\r\n      name: \"Discussion with team\",\r\n      id: \"Task 2\",\r\n      progress: 10,\r\n      dependencies: [\"Task 1\"],\r\n      type: \"task\",\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\r\n      name: \"Developing\",\r\n      id: \"Task 3\",\r\n      progress: 2,\r\n      dependencies: [\"Task 2\"],\r\n      type: \"task\",\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\r\n      name: \"Review\",\r\n      id: \"Task 4\",\r\n      type: \"task\",\r\n      progress: 70,\r\n      dependencies: [\"Task 2\"],\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\r\n      name: \"Release\",\r\n      id: \"Task 6\",\r\n      progress: currentDate.getMonth(),\r\n      type: \"milestone\",\r\n      dependencies: [\"Task 4\"],\r\n      project: \"ProjectSample\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 18),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 19),\r\n      name: \"Party Time\",\r\n      id: \"Task 9\",\r\n      progress: 0,\r\n      isDisabled: true,\r\n      type: \"task\",\r\n    },\r\n  ];\r\n  return tasks;\r\n}\r\n\r\nexport function getStartEndDateForProject(tasks: Task[], projectId: string) {\r\n  const projectTasks = tasks.filter(t => t.project === projectId);\r\n  let start = projectTasks[0].start;\r\n  let end = projectTasks[0].end;\r\n\r\n  for (let i = 0; i < projectTasks.length; i++) {\r\n    const task = projectTasks[i];\r\n    if (start.getTime() > task.start.getTime()) {\r\n      start = task.start;\r\n    }\r\n    if (end.getTime() < task.end.getTime()) {\r\n      end = task.end;\r\n    }\r\n  }\r\n  return [start, end];\r\n}\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}